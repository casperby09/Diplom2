@using Diplom2.Models
@model Item
@{
    ViewData["Title"] = "Edit item";
}
<h2>Edit item name - @Model.ItemName</h2>

<form autocomplete="off" method="post" asp-action="EditItem" asp-route-id="@Model.ItemId">
    <div class="form-group row">
        <label class="col-sm-2 col-form-label" for="itemName">Name</label>
        <div class="col-sm-6">
            <input class="form-control" id="itemName" value="@Model.ItemName" type="text" name="itemName" required />
        </div>
    </div>

    <div class="form-group row">
        <label class="col-sm-2 col-form-label" for="itemName">Tags</label>
        <div class="col-sm-6">
            <div class="autocomplete" data-type-zone-class="form-control type-zone" data-tags-input-name="tags" id="tagBox">@ViewBag.TagsItem</div>
        </div>
    </div>
    @foreach (var number in Model.ValueNumbers)
    {
        <div class="form-group row">
            <label class="col-sm-2 col-form-label" for="valueNumber_@number.Id">@number.Number.Name</label>
            <div class="col-sm-6">
                <input class="form-control" id="valueNumber_@number.Id" value="@number.Value" type="number" step="any" name="valueNumber_@number.Id" required />
            </div>
        </div>
    }
    @foreach (var line in Model.ValueLines)
    {
        <div class="form-group row">
            <label class="col-sm-2 col-form-label" for="valueLine_@line.Id">@line.Line.Name</label>
            <div class="col-sm-6">
                <input class="form-control" id="valueLine_@line.Id" value="@line.Value" type="text" name="valueLine_@line.Id" required />
            </div>
        </div>
    }
    @foreach (var text in Model.ValueTexts)
    {
        <div class="form-group row">
            <label class="col-sm-2 col-form-label" for="valueText_@text.Id">@text.Text.Name</label>
            <div class="col-sm-6">
                <textarea rows="3" class="form-control" id="valueText_@text.Id" type="text" name="valueText_@text.Id" required>@text.Value</textarea>
            </div>
        </div>
    }
    @foreach (var date in Model.ValueDates)
    {
        <div class="form-group row">
            <label class="col-sm-2 col-form-label" for="valueDate_@date.Id">@date.Date.Name</label>
            <div class="col-sm-6">
                <input class="form-control" id="valueDate_@date.Id" type="date" value="@date.Value.ToString("yyyy-MM-dd")" name="valueDate_@date.Id" required />
            </div>
        </div>
    }
    @foreach (var logical in Model.ValueLogicals)
    {
        <div class="form-group row">
            <label class="col-sm-2 col-form-label" for="valueLogical_@logical.Id">@logical.Logical.Name</label>
            <div class="col-sm-1">
                @if (logical.Value)
                {
                    <input class="form-control" checked id="valueLogical_@logical.Id" value="true" type="checkbox" name="valueLogical_@logical.Id" />
                }
                else
                {
                    <input class="form-control" id="valueLogical_@logical.Id" value="true" type="checkbox" name="valueLogical_@logical.Id" />
                }
            </div>
        </div>
    }
    <div class="form-group">
        <button class="btn btn-success" type="submit" id="submit">Edit item</button>
    </div>
</form>
@foreach (var item in ViewBag.TagNames)
{
    <div class="tag-list" hidden>@item</div>
}

@section Scripts{
<script src="~/js/tagging.min.js"></script>
<script>
    $("#tagBox").tagging();
</script>
<script>
    var countries = [];
    var divtag = document.querySelectorAll(".tag-list");
    divtag.forEach(element => countries.push(element.innerHTML));
    function autocomplete(inp, arr) {
        var currentFocus;
        console.log(inp)
        inp.addEventListener("input", function(e) {
            var a, b, i, val = this.value;
            closeAllLists();
            if (!val) { return false;}
            currentFocus = -1;
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            this.parentNode.appendChild(a);
            for (i = 0; i < arr.length; i++) {
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    b = document.createElement("DIV");
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    b.addEventListener("click", function(e) {
                        inp.value = this.getElementsByTagName("input")[0].value;
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        inp.addEventListener("keydown", function(e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                currentFocus++;
                addActive(x);
            } else if (e.keyCode == 38) {
                currentFocus--;
                addActive(x);
            } else if (e.keyCode == 13) {
                e.preventDefault();
                if (currentFocus > -1) {
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            if (!x) return false;
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }
    var inp = document.querySelectorAll(".type-zone");
    inp.forEach(element => activetag(element));
    function activetag (inp){
        autocomplete(inp, countries);
    }
</script>
}

